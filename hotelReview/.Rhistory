Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
rem("abcxAxBxCx","a")
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
rem('123456','4')
rem('123456','1')
rem('123456','5')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
values
assign(values,"A1","2")
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
assign(values,"A1","2")
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
numel('abc')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
numel('1234')
numel('135')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
library(Rcpp)
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
assign(values,"A1","2")
values
values["A1"]
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
getel('012345')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
values
assign(values,"I9","4")
values["I9"]='1234567ZZZ'
assign(values,"I9","3")
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
values
eliminate(values,"A1","2")
assign(values,"A1","4")
assign(values,"A1","9")
assign(values,"A1","7")
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
strfind("abc","d")
strfind("abc","c")
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
strfind("abc","a")
strfind("abc","d")
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
strfind("abc","d")
strfind("abc","a")
strfin("abc","b")
strfind("abc","b")
strfind("abc","z")
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/mutualRec.cpp')
strfind("abc","a")
strfind("abc","e")
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
assign(values,"A1","2")
Rcpp::sourceCpp('notesofdabbler/Rspace/wkspace/sudoku_Norvig_func_cpp.cpp')
assign(values,"A1","2")
377000/3547
377000/5487
315000/2757
library(dplyr)
install.package("dplyr",dependencies=TRUE)
install.packages("dplyr",dependencies=TRUE)
install.packages("dplyr",dependencies=TRUE)
install.packages("dplyr")
library(Rcpp)
evalCpp('1+1')
x-list(1,2,3)
x=list(1,2,3)
x
names(x)=c("A","B","C")
x
x["A"]
x["C"]
x=list(1,2,3)
x
names(x)=c("A","B","C")
x
x["C"]
install.pacakges("dplyr",dependencies=TRUE)
install.packages("dplyr",dependencies=TRUE)
x=list(1,3,4)
install.packages("Rcpp",dependencies=TRUE)
install.packages("ggplot2",dependencies=TRUE)
# set working directory
setwd("~/notesofdabbler/blog_notesofdabbler/hotelReview/")
library(dplyr)
library(lubridate)
library(ggplot2)
library(tm)
library(scales)
library(topicmodels)
# load data for a hotel
# currently 3 datasets available from scraping trip advisor data
#    1. J W Marriott, Indianapolis (label: jwmarriott)
#    2. Hampton Inn Indianapolis Northwest -100 (label: hamptoninn)
#    3. Conrad Indianapolis (label: conrad)
#
hotellist=c("jwmarriott","conrad","hamptoninn")
setwd("~/notesofdabbler/githubfolder/blog_notesofdabbler/hotelReview/")
dfrating.l=lapply(hotellist,
function(x) {
filenm=paste("dfrating_",x,".Rda",sep="")
load(filenm)
return(list(dfrating=df,
top3records=head(df),
numrevs=nrow(df).
freqRating=table(df)))
})
names(dfrating.l)=hotellist
hotellist=c("jwmarriott","conrad","hamptoninn")
# * Number of reviews in dataset
# * frequency of different ratings
dfrating.l=lapply(hotellist,
function(x) {
filenm=paste("dfrating_",x,".Rda",sep="")
load(filenm)
return(list(dfrating=dfrating,
top3records=head(dfrating),
numrevs=nrow(dfrating).
freqRating=table(dfrating)))
})
test=function(x) {
filenm=paste("dfrating_",x,".Rda",sep="")
load(filenm)
return(list(dfrating=dfrating,
top3records=head(dfrating),
numrevs=nrow(dfrating).
freqRating=table(dfrating)))
}
x="jwmarriott"
filenm=paste("dfrating_",x,".Rda",sep="")
load(filenm)
tst=list(dfrating=dfrating,
top3records=head(dfrating),
numrevs=nrow(dfrating).
freqRating=table(dfrating))
dfrating.l=lapply(hotellist,
function(x) {
filenm=paste("dfrating_",x,".Rda",sep="")
load(filenm)
return(list(dfrating=dfrating,
top3records=head(dfrating),
numrevs=nrow(dfrating),
freqRating=table(dfrating)))
})
dfrating.l=lapply(hotellist,
function(x) {
filenm=paste("dfrating_",x,".Rda",sep="")
load(filenm)
return(list(dfrating=dfrating,
top3records=head(dfrating),
numrevs=nrow(dfrating),
freqRating=table(dfrating$ratingnum)))
})
names(dfrating.l)=hotellist
dfrating.l[["jwmarriott"]]
dfrating.l[["jwmarriott"]]$top3records
dfrating.l=lapply(hotellist,
function(x) {
filenm=paste("dfrating_",x,".Rda",sep="")
load(filenm)
return(list(dfrating=dfrating,
top3records=head(dfrating,3),
numrevs=nrow(dfrating),
freqRating=table(dfrating$ratingnum)))
})
dfrating.l[["jwmarriott"]]$top3records
dfrating.l[["jwmarriott"]]$top3records
names(dfrating.l)=hotellist
dfrating.l[["jwmarriott"]]$top3records
dfrating.l[["jwmarriott"]]$numrevs
dfrating.l[["jwmarriott"]]$freqRating
dfrating.l[["conrad"]]$top3records
dfrating.l[["conrad"]]$numrevs
dfrating.l[["conrad"]]$freqRating
dfrating.l[["hamptoninn"]]$top3records
dfrating.l[["hamptoninn"]]$numrevs
dfrating.l[["hamptoninn"]]$freqRating
getrev.bymon=function(hotel){
# get review data
dfrating=dfrating.l[[hotel]]
# get % of reviews for each rating by month
dfrating.bymon=dfrating%>%group_by(yrmon,ratingnum)%>%summarize(count=n())
dfrating.bymon.agg=dfrating.bymon%>%group_by(yrmon)%>%summarize(countfull=sum(count))
dfrating.bymon=merge(dfrating.bymon,dfrating.bymon.agg,c("yrmon"))
dfrating.bymon$pctrating=dfrating.bymon$count/dfrating.bymon$countfull
dfrating.bymon=merge(yrmon.rating,dfrating.bymon,by=c("yrmon","ratingnum"),all.x=TRUE)
dfrating.bymon$pctrating[is.na(dfrating.bymon$pctrating)]=0
dfrating.bymon$count[is.na(dfrating.bymon$count)]=0
dfrating.bymon$countfull[is.na(dfrating.bymon$countfull)]=0
# get number of reviews by month
dfrating.bymon.revs=dfrating.bymon%>%group_by(yrmon)%>%summarize(numrevs=sum(count))
return(list(dfrating.bymon=dfrating.bymon,dfrating.bymon.revs=dfrating.bymon.revs))
}
dfrating.bymon.l=lapply(hotellist,getrev.bymon)
dfrating.bymon.l=lapply(hotellist,function(x) getrev.bymon(x))
getrev.bymon=function(hotel){
# get review data
dfrating=dfrating.l[[hotel]]
# create a month label
dfrating$yrmon=floor_date(dfrating$ratingdt,"month")
# create sequence of months
yrmon=unique(dfrating$yrmon)
yrmonseq=seq(min(yrmon),max(yrmon),by="months")
# yr-month and rating combinations
yrmon.rating=expand.grid(yrmon=yrmonseq,ratingnum=c(1,2,3,4,5))
# get % of reviews for each rating by month
dfrating.bymon=dfrating%>%group_by(yrmon,ratingnum)%>%summarize(count=n())
dfrating.bymon.agg=dfrating.bymon%>%group_by(yrmon)%>%summarize(countfull=sum(count))
dfrating.bymon=merge(dfrating.bymon,dfrating.bymon.agg,c("yrmon"))
dfrating.bymon$pctrating=dfrating.bymon$count/dfrating.bymon$countfull
dfrating.bymon=merge(yrmon.rating,dfrating.bymon,by=c("yrmon","ratingnum"),all.x=TRUE)
dfrating.bymon$pctrating[is.na(dfrating.bymon$pctrating)]=0
dfrating.bymon$count[is.na(dfrating.bymon$count)]=0
dfrating.bymon$countfull[is.na(dfrating.bymon$countfull)]=0
# get number of reviews by month
dfrating.bymon.revs=dfrating.bymon%>%group_by(yrmon)%>%summarize(numrevs=sum(count))
return(list(dfrating.bymon=dfrating.bymon,dfrating.bymon.revs=dfrating.bymon.revs))
}
dfrating.bymon.l=lapply(hotellist,function(x) getrev.bymon(x))
hotel=hotellist[1]
hotel
dfrating=dfrating.l[[hotel]]
dfrating$yrmon=floor_date(dfrating$ratingdt,"month")
library(dplyr)
library(lubridate)
library(ggplot2)
library(tm)
library(scales)
library(topicmodels)
dfrating$yrmon=floor_date(dfrating$ratingdt,"month")
head(dfrating$ratingdt)
dfrating=dfrating.l[[hotel]]$dfrating
# create a month label
dfrating$yrmon=floor_date(dfrating$ratingdt,"month")
getrev.bymon=function(hotel){
# get review data
dfrating=dfrating.l[[hotel]]$dfrating
# create a month label
dfrating$yrmon=floor_date(dfrating$ratingdt,"month")
# create sequence of months
yrmon=unique(dfrating$yrmon)
yrmonseq=seq(min(yrmon),max(yrmon),by="months")
# yr-month and rating combinations
yrmon.rating=expand.grid(yrmon=yrmonseq,ratingnum=c(1,2,3,4,5))
# get % of reviews for each rating by month
dfrating.bymon=dfrating%>%group_by(yrmon,ratingnum)%>%summarize(count=n())
dfrating.bymon.agg=dfrating.bymon%>%group_by(yrmon)%>%summarize(countfull=sum(count))
dfrating.bymon=merge(dfrating.bymon,dfrating.bymon.agg,c("yrmon"))
dfrating.bymon$pctrating=dfrating.bymon$count/dfrating.bymon$countfull
dfrating.bymon=merge(yrmon.rating,dfrating.bymon,by=c("yrmon","ratingnum"),all.x=TRUE)
dfrating.bymon$pctrating[is.na(dfrating.bymon$pctrating)]=0
dfrating.bymon$count[is.na(dfrating.bymon$count)]=0
dfrating.bymon$countfull[is.na(dfrating.bymon$countfull)]=0
# get number of reviews by month
dfrating.bymon.revs=dfrating.bymon%>%group_by(yrmon)%>%summarize(numrevs=sum(count))
return(list(dfrating.bymon=dfrating.bymon,dfrating.bymon.revs=dfrating.bymon.revs))
}
dfrating.bymon.l=lapply(hotellist,function(x) getrev.bymon(x))
p=ggplot(dfrating.bymon.revs[[1]],aes(x=yrmon,y=numrevs))+geom_line()
p=p+xlab("")+ylab("# of reviews")
p=p+theme_minimal()
p
p=ggplot(dfrating.bymon.l[[1]]$dfrating.bymon.revs,aes(x=yrmon,y=numrevs))+geom_line()
p=p+xlab("")+ylab("# of reviews")
p=p+theme_minimal()
p
getrev.bymon=function(hotel){
# get review data
dfrating=dfrating.l[[hotel]]$dfrating
# create a month label
dfrating$yrmon=floor_date(dfrating$ratingdt,"month")
# create sequence of months
yrmon=unique(dfrating$yrmon)
yrmonseq=seq(min(yrmon),max(yrmon),by="months")
# yr-month and rating combinations
yrmon.rating=expand.grid(yrmon=yrmonseq,ratingnum=c(1,2,3,4,5))
# get % of reviews for each rating by month
dfrating.bymon=dfrating%>%group_by(yrmon,ratingnum)%>%summarize(count=n())
dfrating.bymon.agg=dfrating.bymon%>%group_by(yrmon)%>%summarize(countfull=sum(count))
dfrating.bymon=merge(dfrating.bymon,dfrating.bymon.agg,c("yrmon"))
dfrating.bymon$pctrating=dfrating.bymon$count/dfrating.bymon$countfull
dfrating.bymon=merge(yrmon.rating,dfrating.bymon,by=c("yrmon","ratingnum"),all.x=TRUE)
dfrating.bymon$pctrating[is.na(dfrating.bymon$pctrating)]=0
dfrating.bymon$count[is.na(dfrating.bymon$count)]=0
dfrating.bymon$countfull[is.na(dfrating.bymon$countfull)]=0
dfrating.bymon$hotel=hotel
# get number of reviews by month
dfrating.bymon.revs=dfrating.bymon%>%group_by(yrmon)%>%summarize(numrevs=sum(count))
dfrating.bymon.revs$hotel=hotel
return(list(dfrating.bymon=dfrating.bymon,dfrating.bymon.revs=dfrating.bymon.revs))
}
dfrating.bymon.l=lapply(hotellist,function(x) getrev.bymon(x))
df.bymon=do.call(rbind,dfrating.bymon.l)
df.bymon.revs=do.call(rbind,dfrating.bymon.l$dfrating.bymon.revs)
df.bymon.revs=do.call(rbind,dfrating.bymon.l[["frating.bymon.revs"]])
str(dfrating.bymon.l)
df.bymon.revs=do.call(rbind,lapply(dfrating.bymon,function(x) x$dfrating.bymon.revs))
df.bymon.revs=do.call(rbind,lapply(dfrating.bymon.l,function(x) x$dfrating.bymon.revs))
dfrating.bymon.revs=do.call(rbind,lapply(dfrating.bymon.l,function(x) x$dfrating.bymon.revs))
p=ggplot(dfrating.bymon.revs,aes(x=yrmon,y=numrevs))+geom_line()+facet_grid(~hotel)
p=p+xlab("")+ylab("# of reviews")
p=p+theme_minimal()
p
dfrating.bymon.revs=do.call(rbind,lapply(dfrating.bymon.l,function(x) x$dfrating.bymon.revs))
p=ggplot(dfrating.bymon.revs,aes(x=yrmon,y=numrevs))+geom_line()+facet_grid(hotel~)
p=p+xlab("")+ylab("# of reviews")
p=p+theme_minimal()
p
dfrating.bymon.revs=do.call(rbind,lapply(dfrating.bymon.l,function(x) x$dfrating.bymon.revs))
p=ggplot(dfrating.bymon.revs,aes(x=yrmon,y=numrevs))+geom_line()+facet_grid(hotel~)
p=ggplot(dfrating.bymon.revs,aes(x=yrmon,y=numrevs))+geom_line()+facet_grid(hotel~.)
p=p+xlab("")+ylab("# of reviews")
p=p+theme_minimal()
p
p=ggplot(dfrating.bymon.revs,aes(x=yrmon,y=numrevs))+geom_line()+facet_grid(hotel~.)
p=p+xlab("")+ylab("# of reviews")
p=p+theme_bw()
p
dfrating.bymon=do.call(rbind,lapply(dfrating.bymon.l,function(x) x$dfrating.bymon))
p=ggplot(dfrating.bymon,aes(x=yrmon,y=pctrating,color=factor(ratingnum)))+geom_line()
p=p+facet_grid(hotel~.)
p=p+xlab("")+ylab("% of Ratings")
p=p+scale_y_continuous(breaks=seq(0,1,0.1),labels=percent)+scale_color_discrete(name="# stars")
p=p+theme_minimal()
p
p=ggplot(dfrating.bymon,aes(x=yrmon,y=pctrating,color=factor(ratingnum)))+geom_line()
p=p+facet_grid(hotel~.)
p=p+xlab("")+ylab("% of Ratings")
p=p+scale_y_continuous(breaks=seq(0,1,0.1),labels=percent)+scale_color_discrete(name="# stars")
p=p+theme_bw()
p
p=ggplot(dfrating.bymon,aes(x=yrmon,y=pctrating,color=factor(ratingnum)))+geom_line(1.1)
p=p+facet_grid(hotel~.)
p=p+xlab("")+ylab("% of Ratings")
p=p+scale_y_continuous(breaks=seq(0,1,0.1),labels=percent)+scale_color_discrete(name="# stars")
p=p+theme_bw()
p
p=ggplot(dfrating.bymon,aes(x=yrmon,y=pctrating,color=factor(ratingnum)))+geom_line(size=1.1)
p=p+facet_grid(hotel~.)
p=p+xlab("")+ylab("% of Ratings")
p=p+scale_y_continuous(breaks=seq(0,1,0.1),labels=percent)+scale_color_discrete(name="# stars")
p=p+theme_bw()
p
# function to get document-term matrix from hotel review data for a given hotel
getDTM=function(dftxt){
# code adapted from http://www.rdatamining.com/examples/text-mining
txtcorpus=Corpus(VectorSource(dftxt))
inspect(txtcorpus[1:5])
txtcorpus.cl=tm_map(txtcorpus,tolower)
txtcorpus.cl=tm_map(txtcorpus.cl,removePunctuation)
txtcorpus.cl=tm_map(txtcorpus.cl,removeNumbers)
mystopwords=c(stopwords("english"),"hotel","staff","room","rooms","indianapolis","marriott","conference",
"convention","indy","downtown","hampton","stay","stayed","inn","conrad")
txtcorpus.cl=tm_map(txtcorpus.cl,removeWords,mystopwords)
#dictCorpus=txtcorpus.cl
#txtcorpus.cl=tm_map(txtcorpus.cl,stemDocument)
#txtcorpus.cl=tm_map(txtcorpus.cl,stemCompletion,dictionary=dictCorpus)
dtm=DocumentTermMatrix(txtcorpus.cl)
dtm.m=as.matrix(dtm)
return(dtm.m)
}
getTopTerms=function(hotel){
# get review data
dfrating=dfrating.l[[hotel]]$dfrating
minrating=min(dfrating$ratingnum)
maxrating=max(dfrating$ratingnum)
tfreq.l=as.list(rep(NA,maxrating-minrating+1))
# of frequent words to retain
numterms=20
rating=maxrating+1
for(i in 1:(maxrating-minrating+1)){
rating=rating-1
#sprintf("Processing data for %s stars",rating)
dftxt=dfrating$topquote[dfrating$ratingnum==rating]
dtm.m=getDTM(dftxt)
tfreq=colSums(dtm.m)
tfreq.l[[i]]=names(sort(tfreq,decreasing=TRUE)[1:numterms])
}
topTerms=do.call(cbind,tfreq.l)
colnames(topTerms)=paste(names(ratingFreq),"star",sep=" ")[(maxrating-minrating+1):1]
return(list(dtm.m=dtm.m,topTerms=topTerms))
}
topTerms.l=lapply(hotellist,function(x) getTopTerms(x))
minrating=1
maxrating=5
paste(seq(maxrating:minrating)," star")
seq(5,1)
paste(seq(5,1)," star")
paste(seq(maxrating,minrating)," star")
getTopTerms=function(hotel){
# get review data
dfrating=dfrating.l[[hotel]]$dfrating
minrating=min(dfrating$ratingnum)
maxrating=max(dfrating$ratingnum)
tfreq.l=as.list(rep(NA,maxrating-minrating+1))
# of frequent words to retain
numterms=20
rating=maxrating+1
for(i in 1:(maxrating-minrating+1)){
rating=rating-1
#sprintf("Processing data for %s stars",rating)
dftxt=dfrating$topquote[dfrating$ratingnum==rating]
dtm.m=getDTM(dftxt)
tfreq=colSums(dtm.m)
tfreq.l[[i]]=names(sort(tfreq,decreasing=TRUE)[1:numterms])
}
topTerms=do.call(cbind,tfreq.l)
colnames(topTerms)=paste(seq(maxrating,minrating)," star")
return(list(dtm.m=dtm.m,topTerms=topTerms))
}
topTerms.l=lapply(hotellist,function(x) getTopTerms(x))
topTerms.l[[1]]
topTerms.l[["jwmarriott"]]
names(topTerms.l)=hotellist
topTerms.l[["jwmarriott"]]
topTerms.l[["conrad"]]
topTerms.l[["hamptoninn"]]$topTerms
getClust=function(hotel){
# load hotel full review data
dfrating=dfrating.l[[hotel]]$dfrating
dftxt=dfrating$fullrev[dfrating$ratingnum>=4]
dtm.m=getDTM(dftxt)
# clustering of words to detect themes/topics
set.seed(1234)
txtclust=kmeans(t(dtm.m),5)
# size of clusters
txtclust$size
# within and total sum of squares
txtclust$totss
txtclust$withinss
# get list of frequent terms in each cluster
clustTerms=as.list(rep(NA,5))
termlist=colnames(dtm.m)
for(i in 1:5){
termlist.filt=termlist[txtclust$cluster == i]
tfreq=colSums(dtm.m)
tfreq.filt=sort(tfreq[termlist.filt],decreasing=TRUE)
clustTerms[[i]]=names(tfreq.filt[1:20])
}
clust.topic=do.call(cbind,clustTerms)
clust.topic[is.na(clust.topic)]=""
colnames(clust.topic)=c("cluster 1","cluster 2","cluster 3","cluster 4","cluster 5")
# print list of frequent terms in each cluster
return(list(txtclust=txtclust,clust.topic=clust.topic))
}
clust.topic=lapply(hotellist,function(x) getClust(x))
names(clust.topic)=hotellist
clust.topic[["jwmarriott"]]$clust.topic
clust.topic[["conrad"]]$clust.topic
clust.topic[["hamptoninn"]]$clust.topic
sessionInfo()
